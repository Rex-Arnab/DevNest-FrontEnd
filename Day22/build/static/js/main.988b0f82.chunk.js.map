{"version":3,"sources":["components/Memes.js","App.js","index.js"],"names":["Memes","memes","setMeme","className","map","el","index","onClick","src","url","alt","name","id","Meme","meme","useState","template_id","username","password","boxes","Form","setForm","img","setImg","generateMemeRequest","a","console","log","box","num","text","fetch","response","json","data","href","download","replace","style","border","Array","box_count","type","placeholder","onChange","e","newBox","target","value","App","setMemes","useEffect","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEMA,EAAQ,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACtB,OACE,qBAAKC,UAAU,QAAf,SACGF,EAAMG,KAAI,SAACC,EAAIC,GACd,OACE,qBAAiBH,UAAU,OAAOI,QAAS,kBAAML,EAAQG,IAAzD,SACE,qBAAKG,IAAKH,EAAGI,IAAKC,IAAKL,EAAGM,KAAMC,GAAIP,EAAGO,MAD/BN,SASdO,EAAO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMZ,EAAa,EAAbA,QACnB,EAAwBa,mBAAS,CAC/BC,YAAaF,EAAKF,GAClBK,SAAU,kBACVC,SAAU,cACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAMA,EAAsBN,mBAASD,EAAKL,KAApC,mBAAOa,EAAP,KAAYC,EAAZ,KAGMC,EAAmB,uCAAG,kCAAAC,EAAA,6DACtBhB,EADsB,4DACqCW,EAAKJ,YAD1C,qBACkEI,EAAKH,SADvE,qBAC4FG,EAAKF,UACvHC,EAAQC,EAAKD,MACjBO,QAAQC,IAAIR,GACZA,EAAMf,KAAI,SAACwB,EAAIC,GACb,OAAOpB,GAAG,iBAAcoB,EAAd,mBAA4BD,EAAIE,SALlB,SAQLC,MAAMtB,GARD,cAQtBuB,EARsB,gBASTA,EAASC,OATA,OAStBC,EATsB,OAU1BR,QAAQC,IAAIO,GAEZX,EAAOW,EAAKA,KAAKzB,KAZS,4CAAH,qDAczB,OACE,sBAAKN,UAAU,WAAf,UACE,6BAAKW,EAAKH,OACV,gCACA,mBAAGwB,KAAMb,EAAKc,SAAUd,EAAIe,QAAQ,yBAAyB,IAA7D,SACA,qBAAK7B,IAAKc,EAAKZ,IAAKI,EAAKH,KAAM2B,MAAO,CAACC,OAAQ,uBAE9C,YAAIC,MAAM1B,EAAK2B,YAAYrC,KAAI,SAACC,EAAGC,GAAJ,OAC9B,uBACEoC,KAAK,OACLC,YAAa,eAAerC,EAAM,GAElCsC,SAAU,SAACC,GACX,IAAMC,EAAS1B,EAAKD,MACpB2B,EAAOxC,GAAS,CAACwB,KAAMe,EAAEE,OAAOC,OAChC3B,EAAQ,2BAAID,GAAL,IAAWD,MAAO2B,KACzBpB,QAAQC,IAAIP,KALPd,SAUT,sBAAKH,UAAU,kBAAf,UACA,wBAAQI,QAASiB,EAAjB,sBACA,wBAAQjB,QAAS,WACfL,GAAQ,IADV,oCC3DS,SAAS+C,IACtB,MAA0BlC,mBAAS,IAAnC,mBAAOd,EAAP,KAAciD,EAAd,KACA,EAAwBnC,mBAAS,MAAjC,mBAAOD,EAAP,KAAaZ,EAAb,KASA,OARAiD,qBAAU,WACRpB,MAAM,qCACHqB,MAAK,SAACpB,GAAD,OAAcA,EAASC,UAC5BmB,MAAK,SAAClB,GACLR,QAAQC,IAAIO,EAAKA,KAAKjC,OACtBiD,EAAShB,EAAKA,KAAKjC,YAEtB,IAED,sBAAKE,UAAU,MAAf,UACE,gDACCW,EAAO,cAAC,EAAD,CAAMA,KAAMA,EAAMZ,QAASA,IAAa,cAAC,EAAD,CAAOD,MAAOA,EAAOC,QAASA,OCdpFmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACN,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.988b0f82.chunk.js","sourcesContent":["import {useState} from 'react'\n\nconst Memes = ({ memes, setMeme }) => {\n  return (\n    <div className=\"Memes\">\n      {memes.map((el, index) => {\n        return (\n          <div key={index} className=\"card\" onClick={() => setMeme(el)}>\n            <img src={el.url} alt={el.name} id={el.id} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst Meme = ({meme, setMeme}) => {\n  const [Form, setForm] = useState({\n    template_id: meme.id,\n    username: 'ProgrammerArnab',\n    password: 'PaSwOrD@123',\n    boxes: []\n  })\n  const [img, setImg] = useState(meme.url)\n  // const [isError, setIsError] = useState(false)\n\n  const generateMemeRequest = async() => {\n    let url = `https://api.imgflip.com/caption_image?template_id=${Form.template_id}&username=${Form.username}&password=${Form.password}`\n    let boxes = Form.boxes\n    console.log(boxes);\n    boxes.map((box,num) => {\n      return url += `&boxes[${num}][text]=${box.text}`\n    })\n    \n    let response = await fetch(url)\n    let data = await response.json()\n    console.log(data);\n    // setIsError(data.success)\n    setImg(data.data.url);\n  }\n  return (\n    <div className=\"memeCard\">\n      <h1>{meme.name}</h1>\n      <div>\n      <a href={img} download={img.replace('https://i.imgflip.com/','')}>\n      <img src={img} alt={meme.name} style={{border: \"5px solid black\"}}/>\n      </a>\n      {[...Array(meme.box_count)].map((el,index) => (\n        <input\n          type=\"text\"\n          placeholder={\"Enter Text \"+(index+1)}\n          key={index}\n          onChange={(e) => {\n          const newBox = Form.boxes;\n          newBox[index] = {text: e.target.value};\n          setForm({...Form, boxes: newBox});\n          console.log(Form);\n        }}/>\n      ))}\n      </div>\n\n      <div className=\"memeActionPanel\">\n      <button onClick={generateMemeRequest}>Generate</button>\n      <button onClick={() => {\n        setMeme(false)\n        // setIsError(false)\n      }}>Select template</button>\n      \n      </div>\n    </div>\n  )\n}\n\nexport {\n  Memes,\n  Meme\n}\n// id name url width height box_count\n  ","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport {Memes, Meme} from \"./components/Memes\";\n\nexport default function App() {\n  const [memes, setMemes] = useState([]);\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data.data.memes);\n        setMemes(data.data.memes);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {meme ? <Meme meme={meme} setMeme={setMeme}/> : <Memes memes={memes} setMeme={setMeme} />}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}